architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        mixinConfig("immediatelyfast-forge.mixins.json")
        mixinConfig("immediatelyfast-common.mixins.json")
    }
}

configurations {
    common
    shadowCommon

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge("net.minecraftforge:forge:${rootProject.forge_version}")

    annotationProcessor(implementation("io.github.llamalad7:mixinextras-common:${rootProject.mixin_extras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${rootProject.mixin_extras_version}"))
    forgeRuntimeLibrary(implementation(include("net.lenni0451:Reflect:${rootProject.reflect_version}")))

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

remapJar {
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
}

jar {
    dependsOn configurations.shadowCommon
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.shadowCommon.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }
    from("../common/src/main/resources/assets/immediatelyfast/icon.png") {
        rename { "immediatelyfast-icon.png" }
    }
}

processResources {
    inputs.property "version", rootProject.maven_version

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.maven_version
    }
}
