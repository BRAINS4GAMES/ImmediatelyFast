plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "io.github.pacifistmc.forgix" version "1.2.6"
    id "dev.architectury.loom" version "1.4-SNAPSHOT" apply false
}

forgix {
    group = "net.raphimc.immediatelyfast."
    mergedJarName = "${rootProject.name}.jar"
    outputDir = "build/libs"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "java-library"

    base {
        java.toolchain.languageVersion = JavaLanguageVersion.of(17)
        compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

        group = project.maven_group ?: rootProject.maven_group
        version = project.maven_version ?: rootProject.maven_version
    }

    repositories {
        mavenCentral()
    }

    java {
        withSourcesJar()
    }
}

configure(subprojects.findAll { it.name != "api" }) {
    apply plugin: "architectury-plugin"
    apply plugin: "dev.architectury.loom"

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"
    }
}

apply plugin: "architectury-plugin"

tasks.register("build") {
    dependsOn(subprojects.collect {
        it.build
    })
}

tasks.register("createFinalJar", Zip) {
    def inputFile = file("build/libs/${rootProject.name}.jar")
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        [zipTree(inputFile), zipTree(project(":api").jar.archiveFile.get())]
    }
    archiveFileName = "${rootProject.name}-${rootProject.maven_version}.jar"
    destinationDirectory = inputFile.parentFile
}

tasks.register("removeForgixJar", Delete) {
    delete file("build/libs/${rootProject.name}.jar")
}

build.finalizedBy("mergeJars")
mergeJars.finalizedBy("createFinalJar")
createFinalJar.finalizedBy("removeForgixJar")
